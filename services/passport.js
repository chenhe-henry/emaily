const passport = require("passport");
const GoogleStrategy = require("passport-google-oauth20").Strategy;
const mongoose = require("mongoose");
const keys = require("../config/keys");

const User = mongoose.model("users");

passport.serializeUser((user, done) => {
  // no error, identify user.id, this is the mongo record id, not googleId, that is the id that mongo autogenerated.
  done(null, user.id);
});

// the id is what we just serializeUser, user.id
passport.deserializeUser((id, done) => {
  User.findById(id).then(user => {
    done(null, user);
  });
});

passport.use(
  //with new xxxStrategy, we can use facebook strategy, linkedin strategy etc. to use facebook or linkedin to login
  //   of course, remember to add route to facebook auth or linkedin auth
  new GoogleStrategy(
    {
      clientID: keys.googleClientID,
      clientSecret: keys.googleClientSecret,
      callbackURL: "/auth/google/callback",
      proxy: true
    },
    async (accessToken, refreshToken, profile, done) => {
      console.log("accessToken :", accessToken);
      console.log("refreshToken :", refreshToken);
      console.log("profile :", profile);
      const existingUser = await User.findOne({ googleId: profile.id });
      if (existingUser) {
        //we already have a record with the given profile ID
        //   the first parameter in done() is null, means no error here, all good,
        // the second parameter in done() is existingUser, means yes, that is the one we found in our record
        done(null, existingUser);
      } else {
        //we don't have a user record with this ID, make a new record
        //   the same, first null means no error, and second, user means yes, save this user, that is the new record
        const user = await new User({ googleId: profile.id }).save(); //when call new User, it creates a mongoose model instance, which means a single record
        // inside our collection, then we save the instance
        done(null, user);
      }
    }
  )
);
